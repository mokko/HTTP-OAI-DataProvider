HTTP-OAI-DataProvidHeTrT-P0U-.sO0eA0rI7-:CD:oalntitabrP:ir:boHuvTtiTedPde:r:P-Oe0Ar.Il0:0:D7Do:ac:tulamiPebrn:ot:vaHitTdiTeoPrn:(:3O)AI::DataProvider(3)



NNAAMMEE
       HTTP::OAI::DataProvider - A simple OAI data provider

VVEERRSSIIOONN
       version 0.007

SSYYNNOOPPSSIISS
               #Init
               use HTTP::OAI::DataProvider;
               my $provider = HTTP::OAI::DataProvider->new(%options);

               #Verbs: GetRecord, Identify ...
               my $response=$provider->$verb(%params);

               #$response is a string in OAI-PMH XML, either one of the six OAI
               #verbs or an error.

               #New Error Checking
               if ($provider->OAIerror) {
                       debug $provider->error;
                       return $provider->OAIerror;
               }

MMEETTHHOODDSS
   mmyy $$pprroovviiddeerr-->>nneeww (($$ooppttiioonnss));;
       Initialize the HTTP::OAI::DataProvider object with the options of your
       choice.

       On failure return nothing.

       _I_d_e_n_t_i_f_y

       expects a hashref with key value pairs inside all of which are
       required:

               identify => {
                       adminEmail     => 'mauricemengel@gmail.com',
                       baseURL        => 'http://localhost:3000/oai',
                       deletedRecord  => 'transient',
                       repositoryName => 'test config OAI Data Provider',
               },

       See OAI specification (Identify) for available options and details of
       parameters.

       _E_n_g_i_n_e _P_a_r_a_m_e_t_e_r_s

       engine->{engine} specifies the engine you use. Everything else depends
       on the engine you use. Engine parameters are handed down to the engine
       you use.

       This is an example configuration for DP::Engine::SQLite:

               engine => {
                       chunkCache => {
                               maxChunks       => 4000,    #was chunkCacheMaxSize
                               recordsPerChunk => 10,      #was chunkSize
                       },
                       dbfile    => "$FindBin::Bin/../t/environment/db",
                       engine    => 'HTTP::OAI::DataProvider::Engine::SQLite',
                       locateXSL => sub {
                               my $prefix       = shift;
                               my $nativePrefix = ( keys %{ $config{engine}{nativeFormat} } )[0]
                                 or die "nativePrefix missing";
                               return "$FindBin::Bin/../t/environment/$nativePrefix" . '2'
                                 . "$prefix.xsl";
                       },
                       nativeFormat => { 'mpx' => 'http://www.mpx.org/mpx' }
               },

       _M_e_s_s_a_g_e_s _(_D_e_b_u_g _a_n_d _W_a_r_n_i_n_g_s_)

               messages => {
                       debug   => sub { my $msg = shift; print "<<$msg\n" if $msg; },
                       warning => sub { my $msg = shift; warn ">>$msg"    if $msg; },
               },

       _M_e_t_a_d_a_t_a _F_o_r_m_a_t_s

               globalFormats => {
                       mpx => {
                               ns_uri => "http://www.mpx.org/mpx",
                               ns_schema =>
                                 "http://github.com/mokko/MPX/raw/master/latest/mpx.xsd",
                       },
                       oai_dc => {
                               ns_uri    => "http://www.openarchives.org/OAI/2.0/oai_dc/",
                               ns_schema => "http://www.openarchives.org/OAI/2.0/oai_dc.xsd",
                       },
               },

       _S_e_t_s

               setLibrary => {
                       '78' => {
                                   'setName' => 'Schellackplatten aus dem Phonogramm-Archiv'
                                 . ' (ursprA~Xnglich fA~Xr DISMARC exportiert)'
                       },
                       'MIMO' =>
                         { 'setName' => 'Musical Instruments selected for MIMO project' },
                       'test' => {
                               'setName' => 'testing setSpecs - might not work without this one',
                       },
               },

       _O_t_h_e_r _P_a_r_a_m_e_t_e_r_s

       all of them option:

               xslt => '/oai2.xsl',

               Adds this path to HTTP::OAI::Repsonse objects to modify output in browser.

               requestURL => 'http://bla.url'

               Overwrite normal requestURL, e.g. when using a reverse proxy etc.
               Note that requestURL specified during new is only the http://domain.com:port
               part (without ? followed by GET params), but that HTTP::OAI treats the
               complete URL as requestURL

   mmyy $$rreessuulltt==$$pprroovviiddeerr-->>GGeettRReeccoorrdd((%%ppaarraammss));;
       All verbs expect params as hash and return a response as an xml string.

       Arguments =for :list * identifier (required) * metadataPrefix
       (required)

       Errors =for :list * badArgument * cannotDisseminateFormat *
       idDoesNotExist

   mmyy $$rreessppoonnssee==$$pprroovviiddeerr-->>IIddeennttiiffyy((%%ppaarraammss));;
       Arguments: none

       Errors: badArgument

       The information for the identify response is assembled from two
       sources: from configuration during new and from inspection of the
       system (earlierstDate, granularity).

   LLiissttMMeettaaddaattaaFFoorrmmaattss ((iiddeennttiiffiieerr));;
       "This verb is used to retrieve the metadata formats available from a
       repository. An optional argument restricts the request to the formats
       available for a specific item." (the spec)

       HTTP::OAI::DataProvider only knows global metadata formats, i.e. it
       assumes that every record is available in every format supported by the
       repository.

       ARGUMENTS

       ·   identifier (optional)

       ERRORS

       ·   badArgument - in _v_a_l_i_d_a_t_e___r_e_q_u_e_s_t_(_)

       ·   idDoesNotExist - here

       ·   noMetadataFormats - here

   mmyy $$rreessppoonnssee==$$pprroovviiddeerr-->>LLiissttIIddeennttiiffiieerrss ((%%ppaarraammss));;
       ARGUMENTS

       ·   from (optional, UTCdatetime value)

       ·   until (optional, UTCdatetime value)

       ·   metadataPrefix (required)

       ·   set (optional)

       ·   resumptionToken (exclusive)

       ERRORS

       ·   badArgument

       ·   badResumptionToken

       ·   cannotDisseminateFormat

       ·   noRecordsMatch

       ·   noSetHierarchy

       NOTE Depending on the repository's support for deletions, a returned
       header may have a status attribute of "deleted" if a record matching
       the arguments specified in the request has been deleted.

       LIMITATIONS By making the metadataPrefix required, the specification
       suggests that ListIdentifiers returns different sets of headers
       depending on which metadataPrefix is chose. HTTP:OAI::DataProvider
       assume, however, that there are only global metadata formats, so it
       will return the same set for all supported metadataFormats.

       TODO: Hierarchical sets

   LLiissttRReeccoorrddss
       returns multiple items (headers plus records) at once. In its capacity
       to return multiple objects it is similar to the other list verbs
       (ListIdentifiers). ListRecord also has the same arguments as
       ListIdentifier.  In its capacity to return full records (incl. header),
       ListRecords is similar to GetRecord.

       ARGUMENTS

       ·   from (optional, UTCdatetime value)

       ·   until (optional, UTCdatetime value)

       ·   metadataPrefix (required unless resumptionToken)

       ·   set (optional)

       ·   resumptionToken (exclusive)

       ERRORS

       ·   badArgument

       ·   badResumptionToken

       ·   cannotDisseminateFormat

       ·   noRecordsMatch

       ·   noSetHierarchy - TODO

   LLiissttSSeettss
       ARGUMENTS

       ·   resumptionToken (optional)

       ERRORS

       ·   badArgument

       ·   badResumptionToken

       ·   noSetHierarchy

   rreettuurrnn $$pprroovviiddeerr-->>eerrrroorr;;
       USED TO BE $provider->errorMessage;

       Returns an internal error message (if any). Error message is a single
       scalar (string).

       Just a getter, no setter! The error is set internally, e.g.
            $provider->_validateRequest (%params) or return provider->error;

   rreettuurrnn $$pprroovviiddeerr-->>eerrrroorrOOAAII;;
       Returns an internal error message (if any). Error message is a single
       scalar (string). Just a getter, no setter!

   cchheecckkFFoorrmmaattSSuuppppoorrtteedd (($$pprreeffiixxWWaanntteedd));;
       Expects a prefix for a metadataPrefix (as scalar), returns an OAI error
       if the format cannot be disseminated. Returns nothing on success, so
       you can do:

               if ( my $e = $self->checkFormatSupported( $params->{metadataPrefix} ) ) {
                       push @errors, $e;
               }

   mmyy $$xxmmll==$$pprroovviiddeerr-->>eerrrr22XXMMLL((@@oobbjj));;
       Parameter is an array of HTTP::OAI::Error objects.

       (Now works with multiple OAI errors.)

   $$sseellff-->>rraaiisseeOOAAIIeerrrroorrss ((@@eerrrroorrss));;
       Expects a list of HTTP::OAI errors. Sets xml string version of the
       error message which can be retrieved using $self->error.

   $$sseellff-->>rraaiisseeOOAAIIeerrrroorr((''nnooRReeccoorrddssMMaattcchh'',, ''ooppttiioonnaall mmeessssaaggee''));;
       Expects an OAI error code as string. The error message is optional.
       Sets the error message which can be retrieved using $self->error.

   mmyy $$xxmmll==$$sseellff-->>__oouuttppuutt(($$rreessppoonnssee));;
       Expects a HTTP::OAI::Response object and returns it as xml string. It
       applies $self->{xslt} if set.

   $$oobbjj== $$sseellff-->>oovveerrwwrriitteeRReeqquueessttUURRLL(($$oobbjj))
       If $provider->{requestURL} exists take that value and overwrite the
       requestURL in the responseURL. requestURL specified in this module
       consists only of      http://blablabla.com:8080

       All params following the question mark are preserved.

       I use this to correct the url of data provider which is hosted on two
       different server. One hosts the perl webapp and the other one caches
       the app for the public.

   $$oobbjj== $$sseellff-->>__iinniitt__xxsslltt(($$oobbjj))
       For an HTTP::OAI::Response object ($obj), sets the stylesheet to the
       value specified during init. This assume that there is only one
       stylesheet.

       This may be a bad name, since not specific enough. This xslt is
       responsible for a nicer look and added on the top of reponse headers.

   $$sseellff-->>__vvaalliiddaatteeRReeqquueesstt((%%ppaarraammss)) oorr rreettuurrnn $$sseellff-->>eerrrroorr;;
       You may want to write $self->_validateRequest(verb=>'GetRecord',
       %params) if params does not include a verb.

   $$sseellff-->>__pprroocceessssSSeettLLiibbrraarryy
       debugging...

PPRRIIVVAATTEE MMEETTHHOODDSS
       You should not need any of the stuff below whether it starts with an
       underline or not.

AAUUTTHHOORR
       Maurice Mengel <mauricemengel@gmail.com>

CCOOPPYYRRIIGGHHTT AANNDD LLIICCEENNSSEE
       This software is copyright (c) 2011 by Maurice Mengel.

       This is free software; you can redistribute it and/or modify it under
       the same terms as the Perl 5 programming language system itself.



perl v5.10.1      HTTP-OAI-DataPro2v0i1d2e-r0-60-.00607::lib::HTTP::OAI::DataProvider(3)
