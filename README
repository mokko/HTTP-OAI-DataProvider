NAME
    HTTP::OAI::DataProvider - A simple OAI data provider

VERSION
    version 0.006

SYNOPSIS
  Init
            use HTTP::OAI::DataProvider;
            my $provider = HTTP::OAI::DataProvider->new(%options);

  Verbs: GetRecord, Identify, ListSets, ListRecords ...
            my $response=$provider->$verb($request, %params)
            #response is xml ready for print/return

  Error checking
            my $e=$response->isError
            if ($response->isError) {
                    #in case of error do this
            }

  Debugging (TODO)
            Debug "message";
            Warning "message";

METHODS
  my $provider->new (%options);
    Initialize the HTTP::OAI::DataProvider object with the options of your
    choice.

    On failure return nothing; in case this the error is likely to occur
    during development and not during runtime it may also croak.

   OPTIONS
    List here only options not otherwise explained?

    *   debug=>callback (TODO)

                If a callback is supplied use this callback for debug output

    * isMetadaFormatSupported=>callback, TODO The callback expects a single
    prefix and returns 1 if true and nothing when not supported. Currently
    only global metadataFormats, i.e. for all items in repository. This one
    seems to be obligatory, so croak when missing.

    * xslt=>'path/to/style.xslt', Adds this path to HTTP::OAI::Repsonse
    objects to modify output in browser. See also _init_xslt for more info.

            Except engine information, nothing no option seems to be required and it is
            still uncertain, maybe even unlikely if engine will be option at all.
            (Alternative would be to just to use the engine.)

    * requestURL Overwrite normal requestURL, e.g. when using a reverse
    proxy cache etc. Note that a) requestURL specified during new is only
    the http://domain.com:port part (without ? followed by GET params), but
    that HTTP::OAI treats the complete URL as requestURL b) badVerb has no
    URL and no question mark c) in modern OAI specification it is actually
    called request and requestURL

            Currently, requestURL evaporates if Salsa_OAI is run under anything else
            than HTTP::Server::Simple.

    * warning =>callback (Todo) If a callback is supplied use this callback
    for warning output

  my $result=$provider->GetRecord(%params);
    Arguments

    *   identifier (required)

    *   metadataPrefix (required)

    Errors

    *   DbadArgument: already tested

    *   cannotDisseminateFormat: gets checked here

    *   idDoesNotExist: gets checked here

  my $response=$provider->Identify();
    Callback should be passed over to HTTP::OAI::DataProvider during
    initialization with option Identify, e.g. my $provider =
    HTTP::OAI::DataProvider->new( #other options #... Identify =>
    'Salsa_OAI::salsa_Identify', );

    This method expects HTTP::OAI::Identify object from the callback and
    will prompty return a xml string.

  ListMetadataFormats (identifier);
    "This verb is used to retrieve the metadata formats available from a
    repository. An optional argument restricts the request to the formats
    available for a specific item." (the spec)

    HTTP::OAI::DataProvider only knows global metadata formats, i.e. it
    assumes that every record is available in every format supported by the
    repository.

    ARGUMENTS

    *   identifier (optional)

    ERRORS

    *   badArgument - in validate_request()

    *   idDoesNotExist - here

    *   noMetadataFormats - here

  my $xml=$provider->ListIdentifiers ($params);
    Returns xml as string, either one or multiple errors or a
    ListIdentifiers verb.

    The Spec in my words: This verb is an abbreviated form of ListRecords,
    retrieving only headers rather than headers and records. Optional
    arguments permit selective harvesting of headers based on set membership
    and/or datestamp.

    Depending on the repository's support for deletions, a returned header
    may have a status attribute of "deleted" if a record matching the
    arguments specified in the request has been deleted.

    ARGUMENTS

    *   from (optional, UTCdatetime value)

    *   until (optional, UTCdatetime value)

    *   metadataPrefix (required)

    *   set (optional)

    *   resumptionToken (exclusive) [NOT IMPLEMENTED!]

    ERRORS

    *   badArgument: already checked in validate_request

    *   badResumptionToken: here

    *   cannotDisseminateFormat: here

    *   noRecordsMatch:here

    *   noSetHierarchy: here. Can only appear if query has set

    LIMITATIONS By making the metadataPrefix required, the specification
    suggests that ListIdentifiers returns different sets of headers
    depending on which metadataPrefix is chose. HTTP:OAI::DataProvider
    assume, however, that there are only global metadata formats, so it will
    return the same set for all supported metadataFormats.

    TODO

    *   Hierarchical sets

  ListRecords
    returns multiple items (headers plus records) at once. In its capacity
    to return multiple objects it is similar to the other list verbs
    (ListIdentifiers). ListRecord also has the same arguments as
    ListIdentifier. In its capacity to return full records (incl. header),
    ListRecords is similar to GetRecord.

    ARGUMENTS

    *   from (optional, UTCdatetime value) TODO: Check if it works

    *   until (optional, UTCdatetime value) TODO: Check if it works

    *   metadataPrefix (required unless resumptionToken)

    *   set (optional)

    *   resumptionToken (exclusive)

    ERRORS

    *   badArgument: checked for before you get here

    *   badResumptionToken - TODO

    *   cannotDisseminateFormat - TODO

    *   noRecordsMatch - here

    *   noSetHierarchy - TODO

    TODO

    *   Check if error appears as excepted when non-supported metadataFormat

  ListSets
    ARGUMENTS

    *   resumptionToken (optional)

    ERRORS

    *   badArgument -> HTTP::OAI::Repository

    *   badResumptionToken -> here

    *   noSetHierarchy --> here

PUBLIC UTILITY FUNCTIONS / METHODS
    check error, display error, warning, debug etc.

  my $xml=$provider->err2XML(@obj);
    Parameter is an array of HTTP::OAI::Error objects. Of course, also a
    single value.

    Includes the nicer output stylesheet setting from init.

PRIVATE METHODS
    HTTP::OAI::DataProvider is to be used by frontend developers. What is
    not meant for them, is private.

  my $params=_hashref (@_);
    Little function that transforms array of parameters to hashref and
    returns it.

  my $chunk=$self->chunkExists ($params, [$request]);
    TODO: should be called getChunkDesc

    Tests whether

        a) whether a resumptionToken is in params and b) there is a
        chunkDesc with that token in the cache.

    It returns either a chunkDesc or nothing.

    Usage: my $chunk=$self->chunkExists ($params) if (!$chunk) { return new
    HTTP::OAI::Error (code=>'badResumptionToken'); }

  $self->_output($response);
    Expects a HTTP::OAI::Response object and returns it as xml string. It
    applies $self->{xslt} if set.

  $obj= $self->overwriteRequestURL($obj)
    If $provider->{requestURL} exists take that value and overwrite the
    requestURL in the responseURL. requestURL specified in this module
    consists only of http://blablabla.com:8080 All params following the
    quetion mark will be preserved. $provider->{requestURL} should a config
    value, e.g. to make the cache appear to be real.

  $obj= $self->_init_xslt($obj)
    For an HTTP::OAI::Response object ($obj), sets the stylesheet to the
    value specified during init. This assume that there is only one
    stylesheet.

    This may be a bad name, since not specific enough. This xslt is
    responsible for a nicer look and added on the top of reponse headers.

OAI DATA PROVIDER FEATURES
    SUPPORTED

    *   the six OAI verbs (getRecord, identify, listRecords,
        listMetadataFormats,

         listIdentifiers, listSets) and all errors from OAI-PMH v2 specification

    *   resumptionToken

    *   sets

    *   deletedRecords (only transiently?)

    NOT SUPPORTED

    *   hierarchical sets

TODO
    Currently, I use Dancer::CommandLine. Maybe I should build such a
    mechanism into DataProvider which would also allow to choose a Debug and
    Warning routine via config, something like

            my $provider = HTTP::OAI::DataProvider->new(
                    debug=>'SalsaOAI::Debug',
                    warning=>'SalsaOAI::Warning'
            );

            use HTTP::OAI::DataProvider::Message qw/Debug Warning/;
            new HTTP::OAI::DataProvider::Message (
                    Debug =>'&callback',
                    Warning=>'&callback'
            );

AUTHOR
    Maurice Mengel <mauricemengel@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2011 by Maurice Mengel.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

