NAME
    HTTP::OAI::DataProvider - A simple OAI data provider

VERSION
    version 0.007

SYNOPSIS
            #Init
            use HTTP::OAI::DataProvider;
            my $provider = HTTP::OAI::DataProvider->new(%options);
        
            #Verbs: GetRecord, Identify ...
            my $response=$provider->$verb(%params);

            #$response is a string in OAI-PMH XML, either one of the six OAI 
            #verbs or an error. 

            #New Error Checking 
            if ($provider->OAIerror) {
                    debug $provider->error;
            }

DESCRIPTION
    This package implements an OAI data provider according to
    <http://www.openarchives.org/OAI/openarchivesprotocol.html>

    The provider is database and metadata format agnostic. It comes with
    simple example implementations that should work out of the box,
    including an SQLite backend (DP::Engine::SQLite), a metadata format
    (DP::Mapping::MPX), web interface (bin/webapp.pl) and a command line
    interface (bin/dp.pl).

    I try to avoid too many and obscure dependencies.

    Starting from version 0.07, the user-facing interface of this module
    should be mostly stable.

    Please note: I use 'DP::' as an abbreviation of
    'HTTP::OAI::DataProvider::' thoughout the documentation.

METHODS
  my $provider->new ($options);
    Initialize the HTTP::OAI::DataProvider object with the options of your
    choice.

    On failure return nothing.

   Identify Parameters
    expects a hashref with key value pairs inside all of which are required:

            identify => {
                    adminEmail     => 'mauricemengel@gmail.com',
                    baseURL        => 'http://localhost:3000/oai',
                    deletedRecord  => 'transient',
                    repositoryName => 'test config OAI Data Provider',
            },

    See OAI specification (Identify) for available options and other
    details.

   Engine Parameters
    engine->{engine} specifies the engine you use. Other parameters depend
    on the engine you use. All engine parameters are handed down to the
    engine you use.

            engine => {
                    engine    => 'HTTP::OAI::DataProvider::Engine::SQLite',
                    moreParameters => 'see your engine for more info on those params', 
            },

   Message Parameters
            debug   => sub { my $msg = shift; print "<<$msg\n" if $msg; },
            warning => sub { my $msg = shift; warn ">>$msg"    if $msg; },

   Metadata Format Parameters
            globalFormats => {
                    mpx => {
                            ns_uri => "http://www.mpx.org/mpx",
                            ns_schema =>
                              "http://github.com/mokko/MPX/raw/master/latest/mpx.xsd",
                    },
                    oai_dc => {
                            ns_uri    => "http://www.openarchives.org/OAI/2.0/oai_dc/",
                            ns_schema => "http://www.openarchives.org/OAI/2.0/oai_dc.xsd",
                    },
            },

   Set Parameters
            setLibrary => {
                    '78' => {
                                'setName' => 'Schellackplatten aus dem Phonogramm-Archiv'
                    },
                    'MIMO' =>
                      { 'setName' => 'Musical Instruments selected for MIMO project' },
                    'test' => {
                            'setName' => 'testing setSpecs - might not work without this one',
                    },
            },

   Other Parameters (Optional)
            xslt => '/oai2.xsl',

            Adds path to HTTP::OAI::Repsonse objects to modify output in browser.
        
            requestURL => 'http://bla.url'
        
            Overwrite normal requestURL, e.g. when using a reverse proxy etc.
            Note that requestURL specified during new is only the http://domain.com:port
            part (without ? followed by GET params), but that HTTP::OAI treats the
            complete URL as requestURL

  my $result=$provider->GetRecord(%params);
    Arguments =for :list * identifier (required) * metadataPrefix (required)

    Errors =for :list * badArgument * cannotDisseminateFormat *
    idDoesNotExist

  my $response=$provider->Identify([%params]);
    Arguments: none

    Errors: badArgument

    The information for the identify response is assembled from two sources:
    from configuration during new and from inspection of the system
    (earlierstDate, granularity).

  ListMetadataFormats (%params);
    "This verb is used to retrieve the metadata formats available from a
    repository. An optional argument restricts the request to the formats
    available for a specific item." (the spec)

    HTTP::OAI::DataProvider only knows global metadata formats, i.e. it
    assumes that every record is available in every format supported by the
    repository.

    ARGUMENTS

    *   identifier (optional)

    ERRORS

    *   badArgument - in validate_request()

    *   idDoesNotExist - here

    *   noMetadataFormats - here

  my $response=$provider->ListIdentifiers (%params);
    ARGUMENTS

    *   from (optional, UTCdatetime value)

    *   until (optional, UTCdatetime value)

    *   metadataPrefix (required)

    *   set (optional)

    *   resumptionToken (exclusive)

    ERRORS

    *   badArgument

    *   badResumptionToken

    *   cannotDisseminateFormat

    *   noRecordsMatch

    *   noSetHierarchy

    NOTE Depending on the repository's support for deletions, a returned
    header may have a status attribute of "deleted" if a record matching the
    arguments specified in the request has been deleted.

    LIMITATIONS By making the metadataPrefix required, the specification
    suggests that ListIdentifiers returns different sets of headers
    depending on which metadataPrefix is chose. HTTP:OAI::DataProvider
    assumes, however, that there are only global metadata formats, so it
    will return the same set for all supported metadataFormats.

    TODO: Hierarchical sets

  my $response=$provider->ListRecords(%params);
    returns multiple items (headers plus records) at once. In its capacity
    to return multiple objects it is similar to the other list verbs
    (ListIdentifiers). ListRecord also has the same arguments as
    ListIdentifier. In its capacity to return full records (incl. header),
    ListRecords is similar to GetRecord.

    ARGUMENTS

    *   from (optional, UTCdatetime value)

    *   until (optional, UTCdatetime value)

    *   metadataPrefix (required unless resumptionToken)

    *   set (optional)

    *   resumptionToken (exclusive)

    ERRORS

    *   badArgument

    *   badResumptionToken

    *   cannotDisseminateFormat

    *   noRecordsMatch

    *   noSetHierarchy - TODO

  my $response=$provider->ListSets(%params);
    ARGUMENTS

    *   resumptionToken (optional)

    ERRORS

    *   badArgument

    *   badResumptionToken

    *   noSetHierarchy

  return $provider->error;
    Returns an internal error message (if any). Error message is a single
    scalar (string). TODO: at the monent it is not guaranteed to have an
    error every time an error actually occured. See OAIerror instead.

    Just a getter, no setter! The error is set internally, e.g.
    $provider->_validateRequest (%params) or return provider->error;

  return $provider->errorOAI;
    Returns an internal error message (if any). Error message is a single
    scalar (string). Just a getter, no setter!

  checkFormatSupported ($prefixWanted);
    Expects a prefix for a metadataPrefix (as scalar), returns an OAI error
    if the format cannot be disseminated. Returns nothing on success, so you
    can do:

            if ( my $e = $self->checkFormatSupported( $params->{metadataPrefix} ) ) {
                    push @errors, $e;
            }

  my $xml=$provider->err2XML(@obj);
    Parameter is an array of HTTP::OAI::Error objects.

    (Now works with multiple OAI errors.)

  $self->raiseOAIerrors (@errors);
    Expects a list of HTTP::OAI errors. Sets xml string version of the error
    message which can be retrieved using $self->error.

  $self->raiseOAIerror('noRecordsMatch', 'optional message');
    Expects an OAI error code as string. The error message is optional. Sets
    the error message which can be retrieved using $self->error.

  my $xml=$self->_output($response);
    Expects a HTTP::OAI::Response object and returns it as xml string. It
    applies $self->{xslt} if set.

  $obj= $self->overwriteRequestURL($obj)
    If $provider->{requestURL} exists take that value and overwrite the
    requestURL in the responseURL. requestURL specified in this module
    consists only of http://blablabla.com:8080

    All params following the question mark are preserved.

    I use this to correct the url of data provider which is hosted on two
    different server. One hosts the perl webapp and the other one caches the
    app for the public.

  $obj= $self->_init_xslt($obj)
    For an HTTP::OAI::Response object ($obj), sets the stylesheet to the
    value specified during init. This assume that there is only one
    stylesheet.

    This may be a bad name, since not specific enough. This xslt is
    responsible for a nicer look and added on the top of reponse headers.

  $self->_validateRequest(%params) or return $self->error;
    You may want to write $self->_validateRequest(verb=>'GetRecord',
    %params) if params does not include a verb.

SEE ALSO
    <http://www.openarchives.org/OAI/openarchivesprotocol.html>
    Tim Brody's HTTP::OAI
    Jeff Young's (OCLC) OAICAT (java) at
    <http://www.oclc.org/research/activities/oaicat/>

AUTHOR
    Maurice Mengel <mauricemengel@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2012 by Maurice Mengel.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

